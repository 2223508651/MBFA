double rand_real(double low, double high)
//产生随机实数
{
	double h;
	h = (high - low) * URAND + low + 0.001;
	if (h >= high)
		h = high - 0.001;
	return h;
}

int rand_int(int low, int high)
//产生随机整数
{
	return int((high - low + 1) * URAND) + low;
}

//关于排序函数qsort
int cmp1(const void* a, const void* b)

{
	const individual* e = (const individual*)a;
	const individual* f = (const individual*)b;
	if (e->fvalue[0] == f->fvalue[0])
		return 0;
	else if (e->fvalue[0] < f->fvalue[0])
		return -1;
	else return 1;
}

int cmp2(const void* a, const void* b)

{
	const individual* e = (const individual*)a;
	const individual* f = (const individual*)b;
	if (e->fvalue[1] == f->fvalue[1])
		return 0;
	else if (e->fvalue[1] < f->fvalue[1])
		return -1;
	else return 1;
}
int cmp_c_d(const void* a, const void* b)

{
	const individual* e = (const individual*)a;
	const individual* f = (const individual*)b;
	if (e->crowding_distance == f->crowding_distance)
		return 0;
	else if (e->crowding_distance < f->crowding_distance)
		return 1;
	else
		return -1;
}
